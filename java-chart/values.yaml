config:
  name: null
  dockerImage: null
  secretId: null
  secretAgent: null
  envName: null
  awsRegion: null
  tagVersion: null
  dbMigration: null

deployment: 
  replicas: 2
  livenessProbe: {}
  # livenessProbe:
  #   httpGet:
  #     path: /test
  #     port: 8080
  #   initialDelaySeconds: 5   # Espera 5 segundos antes de empezar a chequear
  #   periodSeconds: 10        # Cada 10 segundos revisa la salud
  #   timeoutSeconds: 1        # Si no recibe respuesta en 1 segundo, considera que falló
  #   failureThreshold: 3      # Si falla 3 veces seguidas, se reinicia el contenedor
  #   successThreshold: 1      # Debe tener al menos 1 éxito para considerarlo sano
  readinessProbe: {}
  # readinessProbe:
  #   httpGet:
  #     path: /test
  #     port: 8080
  #   initialDelaySeconds: 3   # Espera 3 segundos antes de empezar a chequear si está listo
  #   periodSeconds: 5         # Cada 5 segundos revisa si está listo para recibir tráfico
  #   timeoutSeconds: 1        # Si no responde en 1 segundo, falla
  #   failureThreshold: 3      # Después de 3 fallos consecutivos, deja de enviar tráfico
  #   successThreshold: 1      # Debe tener al menos 1 éxito para ser considerado listo
  resources:
    requests:
      cpu: 1000m
      memory: 2048M
    limits:
      cpu: 2000m
      memory: 3072M
  args: ["source /shared/sm/config/envvars && java $JAVA_OPTS -jar /app.jar"]
  nodeSelector: null
  timezone: null
    
job:
  enabled: true
  name: null
  image: null
  version: null
  
ingress:
  className: nginx-public
  host: null
  externalDnsEnabled: false

hpa:
  enabled: false
  minReplicas: 2
  maxReplicas: 6
  targetCpuUse: 80

sa:
  enabled: false
  awsRoleArn: null
  secretsClusterRoleEnabled: false


  
